import Head from 'next/head'
import { Inter } from 'next/font/google'
import {useEffect, useRef, useState} from "react";

export default function Home() {
  const [sounds, setSounds] = useState<null | {sounds: {name: string, sounds: {path: string, name: string}[]}[]}>(null);
  const currentAudio = useRef<HTMLAudioElement | null>(null);

  const [query, setQuery] = useState('');
  const inputRef = useRef<HTMLInputElement | null>(null);
  const [predator, setPredator] = useState<string>(null);

  const filteredSounds =  (sounds && predator) ? sounds.sounds.find(a => a.name === predator).sounds.filter(v => {
    if (!v.name)
      return false;
    if (query && query.length > 0) {
      const match = v.name.toLowerCase().indexOf(query.toLowerCase());
      if (match === -1) {
        return false;
      }
    }
    return true;
  }).sort((a, b) => {
    // sort by shortest name
    return a.name.length - b.name.length;
  }) : null;

  const [selectedPosition, setSelectedPosition] = useState<number>(0);

  useEffect(() =>{
    const keyHandler = (key: KeyboardEvent) => {
      if (key.key === 'Enter') {
        if (filteredSounds && filteredSounds.length > selectedPosition) {
          playAudio(filteredSounds[selectedPosition].path);
          return;
        }
      }
      if (key.key === 'Tab') {
        key.preventDefault();
        if (filteredSounds && filteredSounds.length > selectedPosition) {
          setSelectedPosition(selectedPosition + 1);
        }else{
          setSelectedPosition(0);
        }
      }
      if (inputRef.current) {
        const isFocused = inputRef.current === document.activeElement;
        if (!isFocused) {
          if ("focus" in inputRef.current) {
            inputRef.current.focus();
          }
        }
      }
    }

    window.addEventListener('keydown', keyHandler);
    return () => {
      window.removeEventListener('keydown', keyHandler);
    }
  }, [filteredSounds, selectedPosition]);

  useEffect(() => {
    fetch('/api/sounds').then(sounds => sounds.json()).then(newSounds => {
      setSounds(newSounds);
      // set to first folder
      setPredator(newSounds.sounds[0].name);
    })

    /*
    const fileMap = {
      'h': '/sounds/beatdown/_ Hey how you doin.mp3',
      'j': '/sounds/beatdown/_ Just gettin back.mp3',
      '7': '/sounds/beatdown/_ You were talkin about me being down there around 7.mp3',
      'k': '/sounds/beatdown/_ K.mp3',
      'i': '/sounds/beatdown/_ IS THAT ALRIGHT_.mp3',
    }

    const keyHandler = (key: KeyboardEvent) => {
      if (key.key in fileMap) {
        playAudio(fileMap[key.key]);
      }
    }

    window.addEventListener('keydown', keyHandler);
    return () => {
      window.removeEventListener('keydown', keyHandler);
    }
    */
  }, []);

  const playAudio = (path: string) => {
    const toPlayId = 'sound-' + encodeURIComponent(path);
    const audioEl = currentAudio.current;
    if (audioEl) {
      const isFinished = audioEl.currentTime >= audioEl.duration;
      // only pause it if currently playing, otherwise, allow user to play it again.
      if (!isFinished) {
        audioEl.pause();
        // audioEl.src = '';
        audioEl.currentTime = 0;
        if (audioEl.id === toPlayId) {
          currentAudio.current = null;
          return;
        }
      }

    }
    const audio = new Audio(path);
    audio.id = toPlayId;
    currentAudio.current = audio;

    audio.play().then(() => {
      // Good
    }).catch(err => {
      console.error(err);
    })
  }

  return (
    <>
      <Head>
        <title>This Jim</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className='container'>
        <div className='row'>
          <div className='col-12'>
            {
              sounds ? sounds.sounds.map(v => {
                return <div className='row' key={v.name}>
                  <div className='col-12'>
                    <h1>{v.name}</h1>
                    <input ref={inputRef} autoFocus={true} type='text' className='form-control' value={query} onChange={e => {
                      setQuery(e.target.value);
                      setSelectedPosition(0);
                    }} />
                    <div className='row'>
                      {
                        filteredSounds && filteredSounds.map((sound, i) => {
                          const selected = i === selectedPosition;
                          return <div className={'col-12 col-lg-4'} key={sound.name}>
                            <button className={'btn w-100 fw-bolder ' + (selected ? 'btn-primary' : 'btn-outline-primary')} onClick={() => {
                              playAudio(sound.path);
                            }}>{sound.name}</button>
                          </div>
                        })
                      }
                    </div>
                  </div>
                </div>
              }) : null
            }
          </div>
        </div>
      </div>
    </>
  )
}
